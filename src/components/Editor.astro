---


---

<div class="h-full">
    <div class="flex border-b p-1 pb-3 justify-end">
        <a id="newDoc" class="flex-1 p-1 text-gray-500 hover:text-black transition-colors duration-300 cursor-pointer" title="New markdown doc">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m3.75 9v6m3-3H9m1.5-12H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
            </svg>
        </a>
        <a id="showCode" class="p-1 pl-2 pr-2 text-gray-500 hover:text-black transition-colors duration-300 cursor-pointer" title="Show code">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M17.25 6.75 22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3-4.5 16.5" />
            </svg>
        </a>
        <a id="showDoc" class="p-1 text-gray-500 hover:text-black transition-colors duration-300 cursor-pointer" title="Show markdown result">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
            </svg>
        </a>
        <a id="copyDoc" class="p-1 text-gray-500 hover:text-black transition-colors duration-300 cursor-pointer" title="Show markdown result">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 7.5V6.108c0-1.135.845-2.098 1.976-2.192.373-.03.748-.057 1.123-.08M15.75 18H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08M15.75 18.75v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5A3.375 3.375 0 0 0 6.375 7.5H5.25m11.9-3.664A2.251 2.251 0 0 0 15 2.25h-1.5a2.251 2.251 0 0 0-2.15 1.586m5.8 0c.065.21.1.433.1.664v.75h-6V4.5c0-.231.035-.454.1-.664M6.75 7.5H4.875c-.621 0-1.125.504-1.125 1.125v12c0 .621.504 1.125 1.125 1.125h9.75c.621 0 1.125-.504 1.125-1.125V16.5a9 9 0 0 0-9-9Z" />
            </svg>
        </a>
    </div>
    <div id="editor" class="h-full mt-4">
    </div>
    <article id="markdown" class="prose-xl pt-8 prose-code:text-md prose-pre:bg-white prose-pre:text-black font-sans mb-20">
    </article>
</div>
<style is:global>
    .cm-editor {
        height: 100%;
        border: none !important;
    }

    .cm-focused {
        border: none;
        outline: none !important;
    }

    .cm-gutters {
        display: none !important;
    }
</style>

<script>
    import {basicSetup} from "codemirror";
    import {drawSelection, EditorView, keymap, showPanel} from "@codemirror/view";
    import {markdown} from "@codemirror/lang-markdown";
    import {Vim, vim} from "@replit/codemirror-vim";
    import type {Extension} from "@codemirror/state";
    import {marked} from "marked";
    import {defaultKeymap} from "@codemirror/commands";
    import {oneDark} from "@codemirror/theme-one-dark";

    const LOCAL_STORAGE_KEY = 'NOTES_LOCAL';

    function copyTextToClipboard(text) {
        const textArea = document.createElement("textarea");

        //
        // *** This styling is an extra step which is likely not required. ***
        //
        // Why is it here? To ensure:
        // 1. the element is able to have focus and selection.
        // 2. if the element was to flash render it has minimal visual impact.
        // 3. less flakyness with selection and copying which **might** occur if
        //    the textarea element is not visible.
        //
        // The likelihood is the element won't even render, not even a
        // flash, so some of these are just precautions. However in
        // Internet Explorer the element is visible whilst the popup
        // box asking the user for permission for the web page to
        // copy to the clipboard.
        //

        // Place in the top-left corner of screen regardless of scroll position.
        textArea.style.position = 'fixed';
        textArea.style.top = "0";
        textArea.style.left = "0";

        // Ensure it has a small width and height. Setting to 1px / 1em
        // doesn't work as this gives a negative w/h on some browsers.
        textArea.style.width = '2em';
        textArea.style.height = '2em';

        // We don't need padding, reducing the size if it does flash render.
        textArea.style.padding = "0";

        // Clean up any borders.
        textArea.style.border = 'none';
        textArea.style.outline = 'none';
        textArea.style.boxShadow = 'none';

        // Avoid flash of the white box if rendered for any reason.
        textArea.style.background = 'transparent';


        textArea.value = text;

        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        try {
            document.execCommand('copy');
        } catch (err) {
            console.error('Oops, unable to copy');
        }

        document.body.removeChild(textArea);
    }

    // https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser
    function checkMobile() {
        let check = false;
        (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
        return check;
    };

    /**
      * Sets up Codemirror 6 for markdown editing.
      *
      */
    function setup() {

        // DOM ELEMENTS
        const editor = document.getElementById('editor');
        const showDocBtn = document.getElementById('showDoc');
        const showCodeBtn = document.getElementById('showCode');
        const newDocBtn = document.getElementById('newDoc');
        const copyBtn = document.getElementById('copyDoc');
        const markdownDiv = document.getElementById('markdown');

        // OTHERS
        const notes = window.localStorage.getItem(LOCAL_STORAGE_KEY);

        const now = new Date();
        const hours = now.getHours();
        const darkMode = hours >= 17 || hours <= 5;

        const defaultExtensions: Extension[] = [
            EditorView.lineWrapping,
            basicSetup,
            drawSelection(),
            markdown(),
            EditorView.updateListener.of(update => {
                window.localStorage.setItem(LOCAL_STORAGE_KEY, update.state.doc.toString())
            })
        ];

        if (darkMode) {
            defaultExtensions.push(oneDark)
            document.documentElement.classList.add('dark')
        }

        const view = new EditorView({
            doc: notes || '# Hello World!',
            parent: editor,
            extensions: checkMobile()
                ? defaultExtensions
                : [...defaultExtensions, vim()],
        });

        // LISTENERS

        newDocBtn.addEventListener('click', () => {
            view.dispatch({
                changes: {
                    from: 0,
                    to: view.state.doc.toString().length,
                    insert: [
                        '---',
                        'title: Hello new post',
                        'summary: This is a summary for this new post.',
                        'tags: []',
                        'date: 2023-03-01',
                        'author: Matthias',
                        '---',
                        '',
                        '',
                        '# Hello new Post!'
                    ].join('\n')
                }
            })
        });

        showDocBtn.addEventListener('click', () => {
            editor.style.display = 'none';
            markdownDiv.style.display = 'block';
            const text = view.state.doc.toString().replace(/^---$.*^---$/ms, '');;
            const result = marked.parse(text);
            if (typeof result === 'string') {
                markdownDiv.innerHTML = result;
            }
        });

        showCodeBtn.addEventListener('click', () => {
            editor.style.display = 'block'
            markdownDiv.style.display = 'none';
        });

        copyBtn.addEventListener('click', () => {
            copyTextToClipboard(view.state.doc.toString())
        });

        Vim.map('jj', '<Esc>', 'insert');
    }

    window.addEventListener('DOMContentLoaded', setup);
</script>